/* eslint-disable */
/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */

"use strict";

function peg$subclass(child, parent) {
  function ctor() { this.constructor = child; }
  ctor.prototype = parent.prototype;
  child.prototype = new ctor();
}

function peg$SyntaxError(message, expected, found, location) {
  this.message  = message;
  this.expected = expected;
  this.found    = found;
  this.location = location;
  this.name     = "SyntaxError";

  if (typeof Error.captureStackTrace === "function") {
    Error.captureStackTrace(this, peg$SyntaxError);
  }
}

peg$subclass(peg$SyntaxError, Error);

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
        literal: function(expectation) {
          return "\"" + literalEscape(expectation.text) + "\"";
        },

        "class": function(expectation) {
          var escapedParts = "",
              i;

          for (i = 0; i < expectation.parts.length; i++) {
            escapedParts += expectation.parts[i] instanceof Array
              ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
              : classEscape(expectation.parts[i]);
          }

          return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
        },

        any: function(expectation) {
          return "any character";
        },

        end: function(expectation) {
          return "end of input";
        },

        other: function(expectation) {
          return expectation.description;
        }
      };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/"/g,  '\\"')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/\]/g, '\\]')
      .replace(/\^/g, '\\^')
      .replace(/-/g,  '\\-')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = new Array(expected.length),
        i, j;

    for (i = 0; i < expected.length; i++) {
      descriptions[i] = describeExpectation(expected[i]);
    }

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== void 0 ? options : {};

  var peg$FAILED = {},

      peg$startRuleIndices = { Document: 0 },
      peg$startRuleIndex   = 0,

      peg$consts = [
        function(v) { return v },
        "\n",
        peg$literalExpectation("\n", false),
        peg$otherExpectation("multi-line comment"),
        /^[ \t\r]/,
        peg$classExpectation([" ", "\t", "\r"], false, false),
        "###",
        peg$literalExpectation("###", false),
        /^[^#]/,
        peg$classExpectation(["#"], true, false),
        "#",
        peg$literalExpectation("#", false),
        "##",
        peg$literalExpectation("##", false),
        peg$anyExpectation(),
        peg$otherExpectation("line comment"),
        /^[^\n]/,
        peg$classExpectation(["\n"], true, false),
        peg$otherExpectation("object"),
        peg$otherExpectation("explicit object"),
        "{",
        peg$literalExpectation("{", false),
        "}",
        peg$literalExpectation("}", false),
        function(o) { return o || {} },
        peg$otherExpectation("implicit object"),
        function(so) {
              fixObjNesting(so, error);
              return so.toObject();
            },
        peg$otherExpectation("nested implicit object"),
        ",",
        peg$literalExpectation(",", false),
        /^[ \t]/,
        peg$classExpectation([" ", "\t"], false, false),
        function(first, kv) { return kv },
        function(first, rest) { return new SubObj([first].concat(rest)) },
        ":",
        peg$literalExpectation(":", false),
        function(k, v) { return { key: k, value: v, loc: location() }; },
        peg$otherExpectation("key"),
        /^[a-zA-Z0-9_]/,
        peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"], "_"], false, false),
        peg$otherExpectation("array"),
        "[",
        peg$literalExpectation("[", false),
        function(first, v) { return v },
        function(first, rest) { return [first].concat(rest) },
        "]",
        peg$literalExpectation("]", false),
        function(a) { return a || [] },
        peg$otherExpectation("bool"),
        "true",
        peg$literalExpectation("true", false),
        "false",
        peg$literalExpectation("false", false),
        "yes",
        peg$literalExpectation("yes", false),
        "no",
        peg$literalExpectation("no", false),
        "on",
        peg$literalExpectation("on", false),
        "off",
        peg$literalExpectation("off", false),
        function() { var t = text(); return (t === 'true' || t === 'yes' || t === 'on') },
        peg$otherExpectation("number"),
        "-",
        peg$literalExpectation("-", false),
        "0",
        peg$literalExpectation("0", false),
        /^[1-9]/,
        peg$classExpectation([["1", "9"]], false, false),
        /^[0-9]/,
        peg$classExpectation([["0", "9"]], false, false),
        ".",
        peg$literalExpectation(".", false),
        "e",
        peg$literalExpectation("e", true),
        /^[+\-]/,
        peg$classExpectation(["+", "-"], false, false),
        function(neg, int, dec, exp) { return Number(text()) },
        peg$otherExpectation("null"),
        "null",
        peg$literalExpectation("null", false),
        function() { return null; },
        peg$otherExpectation("string"),
        "\"",
        peg$literalExpectation("\"", false),
        /^[^"\\]/,
        peg$classExpectation(["\"", "\\"], true, false),
        function(c) { return c.join('') },
        "'",
        peg$literalExpectation("'", false),
        /^[^'\\]/,
        peg$classExpectation(["'", "\\"], true, false),
        "'''",
        peg$literalExpectation("'''", false),
        "''",
        peg$literalExpectation("''", false),
        "\"\"\"",
        peg$literalExpectation("\"\"\"", false),
        "\"\"",
        peg$literalExpectation("\"\"", false),
        function(s) { return processMultiLine(s[1].join('')) },
        "\\",
        peg$literalExpectation("\\", false),
        "u",
        peg$literalExpectation("u", false),
        function(c) {
              if (typeof c === 'string') {
                return {
                  b: '\b', f: '\f', r: '\r', t: '\t', n: '\n'
                }[c] || c;
              }
              return String.fromCharCode(
                parseInt(c.slice(1).join(''), 16)
              );
            },
        peg$otherExpectation("whitespace"),
        /^[ \t\n\r]/,
        peg$classExpectation([" ", "\t", "\n", "\r"], false, false),
        peg$otherExpectation("newline"),
        /^[0-9a-f]/i,
        peg$classExpectation([["0", "9"], ["a", "f"]], false, true),
        function(head, tail) {
              return tail.reduce(function (res, n) {
                return n[1] === '+' ? res + n[3] : res - n[3]
              }, head)
            },
        /^[*\/]/,
        peg$classExpectation(["*", "/"], false, false),
        function(head, tail) {
              return tail.reduce(function (res, n) {
                return n[1] === '*' ? res * n[3] : res / n[3]
              }, head)
            },
        "(",
        peg$literalExpectation("(", false),
        ")",
        peg$literalExpectation(")", false),
        function(x) { return x }
      ],

      peg$bytecode = [
        peg$decode("%;$.\" &\"/C#;4/:$;!/1$;4/($8$: $!!)($'#(#'#(\"'#&'#"),
        peg$decode(";\".# &;'"),
        peg$decode(";-.5 &;../ &;0.) &;1.# &;7"),
        peg$decode("%2!\"\"6!7\"/,#;$/#$+\")(\"'#&'#.# &;%"),
        peg$decode("<%$4$\"\"5!7%0)*4$\"\"5!7%&/\u010D#2&\"\"6&7'/\xFE$$4(\"\"5!7).N &%2*\"\"6*7+/>#%<2,\"\"6,7-=.##&&!&'#/#$+\")(\"'#&'#0Z*4(\"\"5!7).N &%2*\"\"6*7+/>#%<2,\"\"6,7-=.##&&!&'#/#$+\")(\"'#&'#&/\x80$2&\"\"6&7'/q$$4$\"\"5!7%0)*4$\"\"5!7%&/U$%<1\"\"5!7.=.##&&!&'#.5 &%<2!\"\"6!7\"=/##&'!&&#/#$+&)(&'#(%'#($'#(#'#(\"'#&'#=.\" 7#"),
        peg$decode("<%2*\"\"6*7+/Z#%<2,\"\"6,7-=.##&&!&'#/?$$40\"\"5!710)*40\"\"5!71&/#$+#)(#'#(\"'#&'#=.\" 7/"),
        peg$decode(";(.# &;*"),
        peg$decode("<;(.# &;)=.\" 72"),
        peg$decode("<%24\"\"6475/W#;4/N$;).\" &\"/@$;4/7$26\"\"6677/($8%:8%!\")(%'#($'#(#'#(\"'#&'#=.\" 73"),
        peg$decode("<%;*/' 8!::!! )=.\" 79"),
        peg$decode("<%;+/\u0107#$%%;4/;#2<\"\"6<7=/,$;4/#$+#)(#'#(\"'#&'#.I &%;5/?#$4>\"\"5!7?0)*4>\"\"5!7?&/#$+\")(\"'#&'#/2#;+/)$8\":@\"\"$ )(\"'#&'#0\x8A*%%;4/;#2<\"\"6<7=/,$;4/#$+#)(#'#(\"'#&'#.I &%;5/?#$4>\"\"5!7?0)*4>\"\"5!7?&/#$+\")(\"'#&'#/2#;+/)$8\":@\"\"$ )(\"'#&'#&/)$8\":A\"\"! )(\"'#&'#=.\" 7;"),
        peg$decode("%;1.# &;,/Y#;4/P$2B\"\"6B7C/A$;4/8$;\".# &;&/)$8%:D%\"$ )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("<%$4F\"\"5!7G/,#0)*4F\"\"5!7G&&&#/\"!&,)=.\" 7E"),
        peg$decode("<%2I\"\"6I7J/\xF9#;4/\xF0$%;!/\xBB#$%%;4/2#2<\"\"6<7=/#$+\")(\"'#&'#.# &;5/;#;4/2$;!/)$8#:K#\"% )(#'#(\"'#&'#0d*%%;4/2#2<\"\"6<7=/#$+\")(\"'#&'#.# &;5/;#;4/2$;!/)$8#:K#\"% )(#'#(\"'#&'#&/)$8\":L\"\"! )(\"'#&'#.\" &\"/@$;4/7$2M\"\"6M7N/($8%:O%!\")(%'#($'#(#'#(\"'#&'#=.\" 7H"),
        peg$decode("<%2Q\"\"6Q7R.Y &2S\"\"6S7T.M &2U\"\"6U7V.A &2W\"\"6W7X.5 &2Y\"\"6Y7Z.) &2[\"\"6[7\\/& 8!:]! )=.\" 7P"),
        peg$decode("<%%2_\"\"6_7`/,#;4/#$+\")(\"'#&'#.\" &\"/\u0100#2a\"\"6a7b.O &%4c\"\"5!7d/?#$4e\"\"5!7f0)*4e\"\"5!7f&/#$+\")(\"'#&'#/\xBF$%2g\"\"6g7h/E#$4e\"\"5!7f/,#0)*4e\"\"5!7f&&&#/#$+\")(\"'#&'#.\" &\"/\x7F$%3i\"\"5!7j/Y#4k\"\"5!7l.\" &\"/E$$4e\"\"5!7f/,#0)*4e\"\"5!7f&&&#/#$+#)(#'#(\"'#&'#.\" &\"/+$8$:m$$#\"! )($'#(#'#(\"'#&'#=.\" 7^"),
        peg$decode("<%2o\"\"6o7p/& 8!:q! )=.\" 7n"),
        peg$decode("<;2.\xC1 &%2s\"\"6s7t/_#$4u\"\"5!7v.# &;30/*4u\"\"5!7v.# &;3&/7$2s\"\"6s7t/($8#:w#!!)(#'#(\"'#&'#.o &%2x\"\"6x7y/_#$4z\"\"5!7{.# &;30/*4z\"\"5!7{.# &;3&/7$2x\"\"6x7y/($8#:w#!!)(#'#(\"'#&'#=.\" 7r"),
        peg$decode("%%2|\"\"6|7}/\xCA#$4z\"\"5!7{.[ &;3.U &%%2x\"\"6x7y/>#%<2~\"\"6~7\x7F=.##&&!&'#/#$+\")(\"'#&'#/\"!&,)0g*4z\"\"5!7{.[ &;3.U &%%2x\"\"6x7y/>#%<2~\"\"6~7\x7F=.##&&!&'#/#$+\")(\"'#&'#/\"!&,)&/2$2|\"\"6|7}/#$+#)(#'#(\"'#&'#.\xDA &%2\x80\"\"6\x807\x81/\xCA#$4u\"\"5!7v.[ &;3.U &%%2s\"\"6s7t/>#%<2\x82\"\"6\x827\x83=.##&&!&'#/#$+\")(\"'#&'#/\"!&,)0g*4u\"\"5!7v.[ &;3.U &%%2s\"\"6s7t/>#%<2\x82\"\"6\x827\x83=.##&&!&'#/#$+\")(\"'#&'#/\"!&,)&/2$2\x80\"\"6\x807\x81/#$+#)(#'#(\"'#&'#/' 8!:\x84!! )"),
        peg$decode("%2\x85\"\"6\x857\x86/p#%2\x87\"\"6\x877\x88/G#;6/>$;6/5$;6/,$;6/#$+%)(%'#($'#(#'#(\"'#&'#.( &1\"\"5!7./($8\":\x89\"! )(\"'#&'#"),
        peg$decode("<$;#.) &4\x8B\"\"5!7\x8C0/*;#.) &4\x8B\"\"5!7\x8C&=.\" 7\x8A"),
        peg$decode("<$%$;#.) &4$\"\"5!7%0/*;#.) &4$\"\"5!7%&/2#2!\"\"6!7\"/#$+\")(\"'#&'#/^#0[*%$;#.) &4$\"\"5!7%0/*;#.) &4$\"\"5!7%&/2#2!\"\"6!7\"/#$+\")(\"'#&'#&&&#=.\" 7\x8D"),
        peg$decode("4\x8E\"\"5!7\x8F"),
        peg$decode("%;8/\x8F#$%;4/D#4k\"\"5!7l/5$;4/,$;8/#$+$)($'#(#'#(\"'#&'#0N*%;4/D#4k\"\"5!7l/5$;4/,$;8/#$+$)($'#(#'#(\"'#&'#&/)$8\":\x90\"\"! )(\"'#&'#"),
        peg$decode("%;9/\x8F#$%;4/D#4\x91\"\"5!7\x92/5$;4/,$;9/#$+$)($'#(#'#(\"'#&'#0N*%;4/D#4\x91\"\"5!7\x92/5$;4/,$;9/#$+$)($'#(#'#(\"'#&'#&/)$8\":\x93\"\"! )(\"'#&'#"),
        peg$decode("%2\x94\"\"6\x947\x95/R#;4/I$;7/@$;4/7$2\x96\"\"6\x967\x97/($8%:\x98%!\")(%'#($'#(#'#(\"'#&'#.# &;/")
      ],

      peg$currPos          = 0,
      peg$savedPos         = 0,
      peg$posDetailsCache  = [{ line: 1, column: 1 }],
      peg$maxFailPos       = 0,
      peg$maxFailExpected  = [],
      peg$silentFails      = 0,

      peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleIndices)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleIndex = peg$startRuleIndices[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos], p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line:   details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;
      return details;
    }
  }

  function peg$computeLocation(startPos, endPos) {
    var startPosDetails = peg$computePosDetails(startPos),
        endPosDetails   = peg$computePosDetails(endPos);

    return {
      start: {
        offset: startPos,
        line:   startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line:   endPosDetails.line,
        column: endPosDetails.column
      }
    };
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$decode(s) {
    var bc = new Array(s.length), i;

    for (i = 0; i < s.length; i++) {
      bc[i] = s.charCodeAt(i) - 32;
    }

    return bc;
  }

  function peg$parseRule(index) {
    var bc    = peg$bytecode[index],
        ip    = 0,
        ips   = [],
        end   = bc.length,
        ends  = [],
        stack = [],
        params, i;

    while (true) {
      while (ip < end) {
        switch (bc[ip]) {
          case 0:
            stack.push(peg$consts[bc[ip + 1]]);
            ip += 2;
            break;

          case 1:
            stack.push(void 0);
            ip++;
            break;

          case 2:
            stack.push(null);
            ip++;
            break;

          case 3:
            stack.push(peg$FAILED);
            ip++;
            break;

          case 4:
            stack.push([]);
            ip++;
            break;

          case 5:
            stack.push(peg$currPos);
            ip++;
            break;

          case 6:
            stack.pop();
            ip++;
            break;

          case 7:
            peg$currPos = stack.pop();
            ip++;
            break;

          case 8:
            stack.length -= bc[ip + 1];
            ip += 2;
            break;

          case 9:
            stack.splice(-2, 1);
            ip++;
            break;

          case 10:
            stack[stack.length - 2].push(stack.pop());
            ip++;
            break;

          case 11:
            stack.push(stack.splice(stack.length - bc[ip + 1], bc[ip + 1]));
            ip += 2;
            break;

          case 12:
            stack.push(input.substring(stack.pop(), peg$currPos));
            ip++;
            break;

          case 13:
            ends.push(end);
            ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

            if (stack[stack.length - 1]) {
              end = ip + 3 + bc[ip + 1];
              ip += 3;
            } else {
              end = ip + 3 + bc[ip + 1] + bc[ip + 2];
              ip += 3 + bc[ip + 1];
            }

            break;

          case 14:
            ends.push(end);
            ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

            if (stack[stack.length - 1] === peg$FAILED) {
              end = ip + 3 + bc[ip + 1];
              ip += 3;
            } else {
              end = ip + 3 + bc[ip + 1] + bc[ip + 2];
              ip += 3 + bc[ip + 1];
            }

            break;

          case 15:
            ends.push(end);
            ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

            if (stack[stack.length - 1] !== peg$FAILED) {
              end = ip + 3 + bc[ip + 1];
              ip += 3;
            } else {
              end = ip + 3 + bc[ip + 1] + bc[ip + 2];
              ip += 3 + bc[ip + 1];
            }

            break;

          case 16:
            if (stack[stack.length - 1] !== peg$FAILED) {
              ends.push(end);
              ips.push(ip);

              end = ip + 2 + bc[ip + 1];
              ip += 2;
            } else {
              ip += 2 + bc[ip + 1];
            }

            break;

          case 17:
            ends.push(end);
            ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

            if (input.length > peg$currPos) {
              end = ip + 3 + bc[ip + 1];
              ip += 3;
            } else {
              end = ip + 3 + bc[ip + 1] + bc[ip + 2];
              ip += 3 + bc[ip + 1];
            }

            break;

          case 18:
            ends.push(end);
            ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

            if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length) === peg$consts[bc[ip + 1]]) {
              end = ip + 4 + bc[ip + 2];
              ip += 4;
            } else {
              end = ip + 4 + bc[ip + 2] + bc[ip + 3];
              ip += 4 + bc[ip + 2];
            }

            break;

          case 19:
            ends.push(end);
            ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

            if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length).toLowerCase() === peg$consts[bc[ip + 1]]) {
              end = ip + 4 + bc[ip + 2];
              ip += 4;
            } else {
              end = ip + 4 + bc[ip + 2] + bc[ip + 3];
              ip += 4 + bc[ip + 2];
            }

            break;

          case 20:
            ends.push(end);
            ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

            if (peg$consts[bc[ip + 1]].test(input.charAt(peg$currPos))) {
              end = ip + 4 + bc[ip + 2];
              ip += 4;
            } else {
              end = ip + 4 + bc[ip + 2] + bc[ip + 3];
              ip += 4 + bc[ip + 2];
            }

            break;

          case 21:
            stack.push(input.substr(peg$currPos, bc[ip + 1]));
            peg$currPos += bc[ip + 1];
            ip += 2;
            break;

          case 22:
            stack.push(peg$consts[bc[ip + 1]]);
            peg$currPos += peg$consts[bc[ip + 1]].length;
            ip += 2;
            break;

          case 23:
            stack.push(peg$FAILED);
            if (peg$silentFails === 0) {
              peg$fail(peg$consts[bc[ip + 1]]);
            }
            ip += 2;
            break;

          case 24:
            peg$savedPos = stack[stack.length - 1 - bc[ip + 1]];
            ip += 2;
            break;

          case 25:
            peg$savedPos = peg$currPos;
            ip++;
            break;

          case 26:
            params = bc.slice(ip + 4, ip + 4 + bc[ip + 3]);
            for (i = 0; i < bc[ip + 3]; i++) {
              params[i] = stack[stack.length - 1 - params[i]];
            }

            stack.splice(
              stack.length - bc[ip + 2],
              bc[ip + 2],
              peg$consts[bc[ip + 1]].apply(null, params)
            );

            ip += 4 + bc[ip + 3];
            break;

          case 27:
            stack.push(peg$parseRule(bc[ip + 1]));
            ip += 2;
            break;

          case 28:
            peg$silentFails++;
            ip++;
            break;

          case 29:
            peg$silentFails--;
            ip++;
            break;

          default:
            throw new Error("Invalid opcode: " + bc[ip] + ".");
        }
      }

      if (ends.length > 0) {
        end = ends.pop();
        ip = ips.pop();
      } else {
        break;
      }
    }

    return stack[0];
  }


    // ported from https://goo.gl/md9zUA
    var HEREDOC_INDENT = /\n+([^\n\S]*)(?=\S)/g;
    var LEADING_BLANK_LINE  = /^[^\n\S]*\n/;
    var TRAILING_BLANK_LINE = /\n[^\n\S]*$/;
    function processMultiLine(doc) {
      var attempt, indent = null, indentRegex, match;
      while (match = HEREDOC_INDENT.exec(doc)) {
        attempt = match[1];
        if (indent === null ||
            (attempt.length && attempt.length < indent.length))
          indent = attempt;
      }
      if (indent)
        indentRegex = new RegExp('\n' + indent, 'g');
      if (indentRegex) doc = doc.replace(indentRegex, '\n');
      return doc.replace(LEADING_BLANK_LINE, '')
                .replace(TRAILING_BLANK_LINE, '');
    }

    function SubObj(kvs) { this.kvs = kvs; }
    SubObj.prototype.toObject = function () {
      return this.kvs.reduce(function (obj, kv) {
        obj[kv.key] = (kv.value instanceof SubObj)
                    ? kv.value.toObject() : kv.value;
        return obj;
      }, {});
    };

    function fixObjNesting(tree, error, parents) {
      if (!parents) {
        parents = [{
          key: 'ROOT', value: tree, loc: { start: { column: 0 } }
        }];
      }
      var kv, col;
      var kvs = tree.kvs.slice(0);
      for (var i = 0; i < kvs.length; i++) {
        kv = kvs[i];
        col = kv.loc.start.column;
        if (col <= parents[0].loc.start.column) {
          for (var j = 0;
               parents[j] && col <= parents[j].loc.start.column;
               j++) { }
          if (j > parents.length) {
            return error(
              new Error('assertion failure: excessive exdent!?'),
              kv.loc
            );
          }
          var pkvs = parents[j].value.kvs;
          for (j = 0;
               j < pkvs.length
                 && pkvs[j].loc.start.line < kv.loc.start.line;
               j++) { }
          pkvs.splice(j, 0, kv);
          tree.kvs =
            tree.kvs.filter(function (x) { return x !== kv; });
        }
        if (kv.value instanceof SubObj)
          fixObjNesting(kv.value, error, [kv].concat(parents));
      }
    }


  peg$result = peg$parseRule(peg$startRuleIndex);

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

module.exports = {
  SyntaxError: peg$SyntaxError,
  parse:       peg$parse
};

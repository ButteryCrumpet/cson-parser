// Generated by CoffeeScript 1.8.0
var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

module.exports = function(obj, visitor, indent) {
  var indentLine, indentLines, jsIdentifierRE, n, newlineWrap, serialize, tripleQuotesRE, _ref;
  if ((_ref = typeof obj) === 'undefined' || _ref === 'function') {
    return void 0;
  }
  indent = (function() {
    switch (typeof indent) {
      case 'string':
        return indent.slice(0, 10);
      case 'number':
        n = Math.min(indent, 10);
        if (__indexOf.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n) < 0) {
          n = 0;
        }
        return Array(n + 1).join(' ');
      default:
        return 0;
    }
  })();
  if (!indent) {
    return JSON.stringify(obj, visitor, indent);
  }
  indentLine = function(line) {
    return indent + line;
  };
  indentLines = function(str) {
    return str && str.split('\n').map(indentLine).join('\n');
  };
  newlineWrap = function(str) {
    return str && ("\n" + str + "\n");
  };
  jsIdentifierRE = /^[a-z_$][a-z0-9_$]*$/i;
  tripleQuotesRE = new RegExp("'''", 'g');
  obj = JSON.parse(JSON.stringify(obj, visitor));
  return (serialize = function(obj) {
    var array, key, keypairs, object, string, val;
    switch (typeof obj) {
      case 'boolean':
        return obj + '';
      case 'number':
        if (isFinite(obj)) {
          return obj + '';
        } else {
          return 'null';
        }
        break;
      case 'string':
        if (obj.indexOf('\n') === -1) {
          return JSON.stringify(obj);
        } else {
          string = obj.replace(tripleQuotesRE, "\\'''");
          string = newlineWrap(indentLines(string));
          return "'''" + string + "'''";
        }
        break;
      case 'object':
        if (obj === null) {
          return 'null';
        } else if (Array.isArray(obj)) {
          array = obj.map(serialize).join('\n');
          array = newlineWrap(indentLines(array));
          return "[" + array + "]";
        } else {
          keypairs = (function() {
            var _results;
            _results = [];
            for (key in obj) {
              val = obj[key];
              if (!key.match(jsIdentifierRE)) {
                key = JSON.stringify(key);
              }
              val = serialize(val);
              _results.push("" + key + ": " + val);
            }
            return _results;
          })();
          object = keypairs.join('\n');
          object = newlineWrap(indentLines(object));
          return "{" + object + "}";
        }
    }
  })(obj);
};
